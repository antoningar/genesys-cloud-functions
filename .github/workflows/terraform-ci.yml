name: TERRAFORM CI

on:
  pull_request:
    branches: [ main ]

jobs:  
  plan:
    runs-on: ubuntu-latest
    permissions: write-all
    
    strategy:
      matrix:
        node-version: [22.x]
    
    env:
      GENESYSCLOUD_OAUTHCLIENT_ID: ${{ secrets.GENESYSCLOUD_OAUTHCLIENT_ID }}
      GENESYSCLOUD_OAUTHCLIENT_SECRET: ${{ secrets.GENESYSCLOUD_OAUTHCLIENT_SECRET }}
      GENESYSCLOUD_REGION: ${{ secrets.GENESYSCLOUD_REGION }}
      TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: hashicorp/setup-terraform@v3.1.2
      with:    
        cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v6
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./function/package-lock.json
    
    - name: Build and Zip function
      working-directory: ./function
      run: npm run zipnodev

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      run: terraform plan -no-color

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Initialization')
          })

          // 2. Prepare format of the comment
          const output = `
          #### Terraform Initialization \`${{ steps.init.outcome }}\`
          #### Terraform Validation \`${{ steps.validate.outcome }}\`
          
          #### Terraform Plan \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          `

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }